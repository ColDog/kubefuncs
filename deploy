#!/usr/bin/env ruby
require 'optparse'
require 'yaml'
require 'fileutils'

def system!(*cmd)
  puts cmd.join(' ')
  system(*cmd) || raise("command failed")
end

options = {
  'namespace' => 'default',
  'apply' => false,
  'build' => false,
  'build-context' => '.',
  'build-dockerfile' => 'Dockerfile',
  'functions' => 'functions.yaml'
}

parser = OptionParser.new do |opt|
  opt.on('--image IMAGE', 'docker image url') { |o| options['image'] = o }
  opt.on('--namespace NAMESPACE', 'kubernetes namespace') { |o| options['namespace'] = o }
  opt.on('--release RELEASE', 'release name') { |o| options['release'] = o }
  opt.on('--build-context CONTEXT', 'docker build context') { |o| options['build-context'] = o }
  opt.on('--build-dockerfile FILE', 'dockerfile path') { |o| options['build-dockerfile'] = o }
  opt.on('--build', 'build the docker container') { |o| options['build'] = o }
  opt.on('--functions FILE', 'functions.yaml file') { |o| options['functions'] = o }
  opt.on('--apply', 'apply manifests using kubectl') { |o| options['apply'] = o }
end
parser.parse!

raise OptionParser::MissingArgument.new('--image') if options['image'].nil?
raise OptionParser::MissingArgument.new('--release') if options['release'].nil?

if options['build']
  puts "=> building image"
  system! "docker build -t #{options['image']} -f #{options['build-dockerfile']} #{options['build-context']}"
  system! "docker push #{options['image']}"
end

FileUtils.rm_rf 'manifests'
FileUtils.mkdir_p 'manifests'

functions = YAML.load(File.read(options['functions']))

defaults = (functions['defaults'] || {
  'env' => [
    {
      'name' => 'NSQ_NSQD_PORT',
      'value' => '4150',
    },
    {
      'name' => 'NSQ_NSQD_ADDR',
      'valueFrom' => {
        'fieldRef' => {
          'fieldPath' => 'status.hostIP'
        }
      }
    },
    {
      'name' => 'NSQ_LOOKUPD_ADDR',
      'value' => 'kubefuncs-nsq-lookupd.kubefuncs.svc.cluster.local',
    },
    {
      'name' => 'NSQ_LOOKUPD_PORT',
      'value' => '4161',
    }
  ]
})

functions.each do |key, config|
  deployment = {
    'kind' => 'Deployment',
    'apiVersion' => 'extensions/v1beta1',
    'metadata' => {
      'name' => options['release'],
      'namespace' => options['namespace'],
      'labels' => {
        'app' => options['release'],
      },
    },
      'spec' => {
      'replicas' => config['replicas'],
      'template' => {
        'metadata' => {
          'labels' => {
            'app' => options['release'],
          },
        },
        'spec' => {
          'containers' => [{
            'command' => config['command'],
            'image' => options['image'],
            'name' => options['release'],
            'env' => (config['env'] || []) + defaults['env'] + [{
              'name' => 'TOPIC',
              'value' => key,
            }],
            'resources' => config['resources'],
            'ports' => config['ports'],
          }],
        },
      },
    }
  }

  puts "=> writing #{key}"
  File.write("manifests/#{key}.yaml", YAML.dump(deployment))
end

if options['apply']
  puts "=> applying"
  system! "kubectl apply -f manifests"
end
